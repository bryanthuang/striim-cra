{"version":3,"sources":["OptionItem.jsx","Select.jsx","App.js","serviceWorker.js","index.js"],"names":["OptionItem","props","option","handleOptionClick","className","onClick","label","Select","handleClick","open","state","setState","handleXClick","e","options","preventDefault","value","filteredOptions","handleChange","list","filter","includes","target","toLowerCase","this","searchable","placeholder","onChange","xmlns","width","height","viewBox","d","src","length","map","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNASeA,EAPI,SAACC,GAAW,IACtBC,EAA6BD,EAA7BC,OAAQC,EAAqBF,EAArBE,kBACf,OACE,yBAAKC,UAAU,cAAcC,QAAS,kBAAMF,EAAkBD,KAAUA,EAAOI,QCF9DC,E,kDACnB,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IAQRO,YAAc,WAAO,IACZC,EAAQ,EAAKC,MAAbD,KACP,EAAKE,SAAS,CACZF,MAAOA,KAZQ,EAenBG,aAAe,SAACC,GAAO,IACdC,EAAW,EAAKb,MAAhBa,QACPD,EAAEE,iBACF,EAAKJ,SAAS,CACZK,MAAO,GACPV,MAAO,GACPW,gBAAiBH,EACjBL,MAAM,KAtBS,EA0BnBN,kBAAoB,SAACD,GAAY,IACxBO,EAAQ,EAAKC,MAAbD,KACP,EAAKE,SAAS,CACZK,MAAOd,EAAOc,MACdV,MAAOJ,EAAOI,MACdG,MAAOA,KA/BQ,EAmCnBS,aAAe,SAACL,GAAO,IAEjBM,EADc,EAAKlB,MAAhBa,QACYM,QAAO,SAAAlB,GAAM,OAAIA,EAAOc,MAAMK,SAASR,EAAES,OAAON,MAAMO,kBACzE,EAAKZ,SAAS,CACZF,MAAM,EACNO,MAAOH,EAAES,OAAON,MAChBV,MAAOO,EAAES,OAAON,MAChBC,gBAAiBE,KAxCnB,EAAKT,MAAQ,CACXD,MAAM,EACNO,MAAO,GACPV,MAAO,GACPW,gBAAiBhB,EAAMa,SANR,E,qDA8CT,IAAD,SACuCU,KAAKd,MAA5CD,EADA,EACAA,KAAaH,GADb,EACMU,MADN,EACaV,OAAOW,EADpB,EACoBA,gBACNO,KAAKvB,MAAnBwB,WACP,OACE,yBAAKrB,UAAU,oBACb,yBAAKA,UAAU,cACb,2BAAOA,UAAU,cAAcsB,YAAY,YAAYV,MAAOV,EAAOD,QAASmB,KAAKhB,YAAamB,SAAUH,KAAKN,eAC/G,yBAAKd,UAAU,IAAIC,QAASmB,KAAKZ,aAAcgB,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAMC,EAAE,kJACrI,yBAAK5B,UAAU,OAAOC,QAASmB,KAAKhB,YAAayB,IAAKxB,EAAO,wDAAyD,0DAEvHQ,EAAgBiB,OAAS,GACxB,yBAAK9B,UAAS,uBAAkBK,EAAO,GAAK,UACzCQ,EAAgBkB,KAAI,SAAAjC,GAAM,OACzB,kBAAC,EAAD,CAAYA,OAAQA,EAAQC,kBAAmB,EAAKA,kBAAmBiC,IAAKlC,EAAOc,iB,GA5D7DqB,IAAMC,WCCrBC,E,kDACnB,WAAYtC,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXI,QAAU,CACR,CAAEE,MAAO,YAAaV,MAAO,aAC7B,CAAEU,MAAO,aAAcV,MAAO,cAC9B,CAAEU,MAAO,UAAWV,MAAO,aANd,E,qDAYR,IACFQ,EAAWU,KAAKd,MAAhBI,QACP,OACE,6BACE,kBAAC,EAAD,CAAQA,QAASA,S,GAjBQuB,IAAMC,WCQnBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4bd5131d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst OptionItem = (props) => {\r\n  const {option, handleOptionClick} = props;\r\n  return (\r\n    <div className=\"option-item\" onClick={() => handleOptionClick(option)}>{option.label}</div>\r\n  )\r\n}\r\n\r\nexport default OptionItem;","import React from 'react';\nimport OptionItem from './OptionItem';\n\nexport default class Select extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      value: \"\",\n      label: \"\",\n      filteredOptions: props.options\n    }\n  }\n  handleClick = () => {\n    const {open} = this.state\n    this.setState({\n      open: !open\n    })\n  }\n  handleXClick = (e) => {\n    const {options} = this.props;\n    e.preventDefault();\n    this.setState({\n      value: \"\",\n      label: \"\",\n      filteredOptions: options,\n      open: false\n    })\n  }\n\n  handleOptionClick = (option) => {\n    const {open} = this.state;\n    this.setState({\n      value: option.value,\n      label: option.label,\n      open: !open\n    })\n  }\n\n  handleChange = (e) => {\n    const {options} = this.props;\n    let list = options.filter(option => option.value.includes(e.target.value.toLowerCase()))\n    this.setState({\n      open: true,\n      value: e.target.value,\n      label: e.target.value,\n      filteredOptions: list\n    })\n    \n  }\n  render() {\n    const {open, value, label, filteredOptions} = this.state;\n    const {searchable} = this.props;\n    return (\n      <div className=\"select-container\">\n        <div className=\"select-bar\">\n          <input className=\"select-item\" placeholder=\"Select...\" value={label} onClick={this.handleClick} onChange={this.handleChange}></input>\n          <svg className=\"x\" onClick={this.handleXClick} xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 24 24\"><path d=\"M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z\"/></svg>\n          <img className=\"chev\" onClick={this.handleClick} src={open ? 'https://static.thenounproject.com/png/3513276-200.png': 'https://static.thenounproject.com/png/227299-200.png' } />\n        </div>\n        {filteredOptions.length > 0 && \n          <div className={`option-items ${open ? '' : 'close'}`}>\n            {filteredOptions.map(option => \n              <OptionItem option={option} handleOptionClick={this.handleOptionClick} key={option.value}/>\n            )}\n          </div>\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Select from './Select';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      options : [\n        { value: 'chocolate', label: 'Chocolate' },\n        { value: 'strawberry', label: 'Strawberry' },\n        { value: 'vanilla', label: 'Vanilla' }\n      ],\n    }\n  }\n\n\n  render () {\n    const {options} = this.state;\n    return (\n      <div>\n        <Select options={options}/>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}